CREATE DATABASE IF NOT EXISTS MUSIC_STORE;
USE MUSIC_STORE;

-- Q1: WHO IS THE SENIOR MOST EMPLOYEE BASE ON JOB TITLE?
SELECT * FROM EMPLOYEE;
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, TITLE FROM EMPLOYEE
ORDER BY LEVELS DESC
LIMIT 1;


-- Q2 WHO IS THE SECOND MOST SENIOR EMPLOYEE BASE ON JOB TITLE?
SELECT EMPLOYEE_ID, LAST_NAME, TITLE FROM EMPLOYEE
ORDER BY LEVELS DESC
LIMIT 1 OFFSET 1;
			-- OR --
WITH RANK_TABLE AS (
SELECT  EMPLOYEE_ID, LAST_NAME, TITLE, DENSE_RANK() OVER(ORDER BY LEVELS DESC) AS JOB_TITLE_RANK FROM EMPLOYEE
)
SELECT * FROM RANK_TABLE WHERE JOB_TITLE_RANK = 2;


-- Q3: WHICH COUNTRY HAVE THE MOST INVOICES?
SELECT BILLING_COUNTRY, COUNT(*) AS COUNT_ FROM INVOICE
GROUP BY BILLING_COUNTRY
ORDER BY COUNT_ DESC;

-- Q4: WHAT ARE THE TOP 3 VALUES OF TOTAL INVOICES?
SELECT INVOICE_ID, TOTAL FROM INVOICE
ORDER BY TOTAL DESC 
LIMIT 3;


-- Q5: WHICH CITY HAS THE BEST CUSTOMERS, BASE ON THE HIGHEST SUM OF INVOICE TOTALS?
SELECT BILLING_CITY, SUM(TOTAL) AS TOTAL_AMOUNT
FROM INVOICE
GROUP BY BILLING_CITY
ORDER BY TOTAL_AMOUNT DESC
LIMIT 1;


-- Q6: WHO IS THE BEST CUSTOMER? THE CUSTOMER WHO SPEND THE MOST MONEY 
-- 	   WILL BE THE BEST CUSTOMER
SELECT C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, COUNTRY, 
ROUND(SUM(I.TOTAL),2) AS TOTAL_
FROM CUSTOMER C INNER JOIN INVOICE I 
ON C.CUSTOMER_ID = I.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, COUNTRY
ORDER BY TOTAL_ DESC
LIMIT 1
;


-- Q7: WRITE A QUERRY TO RETURN THE EMAIL, FIRST NAME, LAST NAME OF ALL ROCK GENRE MUSIC
-- 	   LISTNER. RETURN YOUR LIST ORDRED ALPHABETICALLY BY EMAIL STARTING WITH A.

SELECT DISTINCT C.EMAIL, C.FIRST_NAME, C.LAST_NAME
FROM CUSTOMER C JOIN INVOICE I ON C.CUSTOMER_ID = I.CUSTOMER_ID
JOIN INVOICE_LINE IL ON I.INVOICE_ID = IL.INVOICE_ID
WHERE IL.TRACK_ID IN 
					(SELECT T.TRACK_ID FROM TRACK T
                    JOIN GENRE G ON T.GENRE_ID = G.GENRE_ID
                    WHERE G.NAME LIKE 'ROCK'
                    )
ORDER BY C.EMAIL ASC;



-- Q8: LET'S INVITE THE ARTISTS WHO HAVE WRITTEN THE MOST ROCK MUSIC IN
-- 	OUR DATASET. WRITE A QUERY THAT RETURN THE ARTIST NAME
--     AND TOTAL TRACK COUNT OF THE TOP 8 ROCK BANDS.

SELECT T.ARTIST_ID, T.NAME, COUNT(TR.TRACK_ID) AS COUNT_OF_MUSIC 
FROM ARTIST T 
JOIN ALBUM A ON T.ARTIST_ID = A.ARTIST_ID 
JOIN TRACK TR ON TR.ALBUM_ID = A.ALBUM_ID
WHERE TR.TRACK_ID IN (SELECT TR.TRACK_ID FROM TRACK TR JOIN 
					 GENRE G ON G.GENRE_ID = TR.GENRE_ID
                     WHERE G.NAME LIKE 'ROCK'
					)
GROUP BY T.ARTIST_ID, T.NAME
ORDER BY COUNT_OF_MUSIC DESC
LIMIT 8
;



-- Q9: RETURN ALL THE TRACK NAME THAT HAVE A SONG LENGTH LONGER THAN THE AVERAGE SONG LENGTH
-- 	   RETURN THE NAME AND MILLISECONDS FOR EACH TRACK. ORDER BY THE SONG LENGTH WITH THE 
--    LONGEST SONGS LISTED FIRST

SELECT NAME, MILLISECONDS FROM TRACK
WHERE MILLISECONDS > (SELECT AVG(MILLISECONDS) AS AVG_MILLISECONDS
					  FROM TRACK
					  )
ORDER BY MILLISECONDS DESC
;



-- Q10: FIND HOW MUCH AMOUNT SPENT BY EACH CUSTOMER ON BEST SELLING ARTIST? WRITE
-- 		A QUERRY TO RETURN CUSTOMER NAME, ARTIST NAME AND TOTAL SPENT

-- WITH COMMON TABLE EXPRESSION --
WITH BEST_SELLING_ARTIST AS (
SELECT AR.ARTIST_ID, AR.NAME, SUM(IL.UNIT_PRICE * IL.QUANTITY) AS TOTAL FROM INVOICE I
	JOIN INVOICE_LINE IL ON IL.INVOICE_ID = I.INVOICE_ID
	JOIN TRACK T ON T.TRACK_ID = IL.TRACK_ID
	JOIN ALBUM A ON A.ALBUM_ID = T.ALBUM_ID
	JOIN ARTIST AR ON AR.ARTIST_ID = A.ARTIST_ID
GROUP BY AR.ARTIST_ID, AR.NAME
ORDER BY TOTAL DESC
LIMIT 1
)
SELECT C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, BSA.NAME, SUM(IL.UNIT_PRICE * IL.QUANTITY) AS TOTAL FROM CUSTOMER C
	JOIN INVOICE I ON C.CUSTOMER_ID = I.CUSTOMER_ID
    JOIN INVOICE_LINE IL ON IL.INVOICE_ID = I.INVOICE_ID
    JOIN TRACK T ON T.TRACK_ID = IL.TRACK_ID
    JOIN ALBUM A ON A.ALBUM_ID = T.ALBUM_ID
    JOIN BEST_SELLING_ARTIST BSA ON BSA.ARTIST_ID = A.ARTIST_ID
GROUP BY C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, BSA.NAME
ORDER BY TOTAL DESC;

-- OR -- (WITH SUB-QUERRY)

SELECT C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, AR.NAME, SUM(IL.UNIT_PRICE * IL.QUANTITY) AS TOTAL FROM CUSTOMER C
	JOIN INVOICE I ON C.CUSTOMER_ID = I.CUSTOMER_ID
    JOIN INVOICE_LINE IL ON IL.INVOICE_ID = I.INVOICE_ID
    JOIN TRACK T ON T.TRACK_ID = IL.TRACK_ID
    JOIN ALBUM A ON A.ALBUM_ID = T.ALBUM_ID
    JOIN ARTIST AR ON AR.ARTIST_ID = A.ARTIST_ID
WHERE AR.ARTIST_ID =		(SELECT AR.ARTIST_ID FROM INVOICE I
								JOIN INVOICE_LINE IL ON IL.INVOICE_ID = I.INVOICE_ID
								JOIN TRACK T ON T.TRACK_ID = IL.TRACK_ID
								JOIN ALBUM A ON A.ALBUM_ID = T.ALBUM_ID
								JOIN ARTIST AR ON AR.ARTIST_ID = A.ARTIST_ID
							GROUP BY AR.ARTIST_ID
							ORDER BY SUM(IL.UNIT_PRICE * IL.QUANTITY) DESC
							LIMIT 1)
GROUP BY C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, AR.NAME
ORDER BY TOTAL DESC;
;



-- Q11: WE WANT TO FIND OUT THE MOST POPULAR MUSCI GENRE FOR EACH COUNTRY.
-- 		WE DETERMINE THE MOST POPULAR GENRE AS THE GENRE WITH THE HIGHEST
-- 		AMOUNT OF PURCHASES. WRITE A QUERY THAT RETURN EACH COUNTRY ALONG 
-- 		WITH THE TOP GENRE. FOR COUNTRIES WHERE THE MAXIMUM NUMBER OF 
-- 		PURCHASES IS SHARED RETURN ALL GENRE

WITH POPULAR_GENRE AS (
SELECT C.COUNTRY, G.GENRE_ID, G.NAME, COUNT(IL.QUANTITY) AS TOTAL_PURCHASE,
ROW_NUMBER() OVER(PARTITION BY C.COUNTRY ORDER BY COUNT(IL.QUANTITY) DESC) AS ROW_NO
FROM INVOICE_LINE IL
	JOIN INVOICE I ON I.INVOICE_ID = IL.INVOICE_ID
	JOIN CUSTOMER C ON C.CUSTOMER_ID = I.CUSTOMER_ID
	JOIN TRACK T ON T.TRACK_ID = IL.TRACK_ID
	JOIN GENRE G ON G.GENRE_ID = T.GENRE_ID
GROUP BY C.COUNTRY, G.GENRE_ID, G.NAME
ORDER BY C.COUNTRY ASC, TOTAL_PURCHASE DESC
)
SELECT * FROM POPULAR_GENRE WHERE ROW_NO = 1
;


-- Q12: WRITE A QUERY THAT DETERMINES THE CUSTOMER THAT HAS SPENT THE MOST
-- 		ON MUSIC FOR EACH COUNTRY. WRITE A QUERY THAT RETURN THE COUNTRY ALONG
-- 		WITH THE TOP CUSTOMER AND HOW MUCH THEY SPENT. FOR COUNTRIES WHERE
-- 		THE TOP AMOUNT SPEND IS SHARED, PROVIDE ALL CUSTOERS WHO SPENT THIS AMOUNT

WITH CUSTOMER_WITH_COUNTRY AS (
		SELECT C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, I.BILLING_COUNTRY, SUM(I.TOTAL) AS TOTAL_SPENT,
        ROW_NUMBER() OVER(PARTITION BY I.BILLING_COUNTRY ORDER BY SUM(I.TOTAL) DESC) AS ROW_NO
        FROM CUSTOMER C 
        JOIN INVOICE I ON C.CUSTOMER_ID = I.CUSTOMER_ID
        GROUP BY 1,2,3,4
        ORDER BY 4 ASC, 5 DESC)
SELECT * FROM CUSTOMER_WITH_COUNTRY WHERE ROW_NO = 1;

